require 'pry'
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def nth_triangle_number(n)
  (0..n).to_a.inject(:+)
end

def all_divisors(n)
  (1..(n**0.5).to_i).to_a.inject([]) do |arr,num| 
    if (n%num) == 0
      arr += [num,n/num] 
    end
    arr.uniq
  end
end

def num_divisors(n)
  all_divisors(n).size  
end

class TriangleNumbers
  attr_accessor :index
  @last_triangle_num
  def initialize
    self.index = 1
    @last_triangle_num = 0
  end

  def next_num
    to_return = index+@last_triangle_num
    self.index += 1
    @last_triangle_num = to_return
    to_return
  end
end

t = TriangleNumbers.new

# binding.pry



ndivs = 0
until ndivs >= 500
  nnum = t.next_num
  ndivs = num_divisors(nnum)
  puts "#{nnum}, #{ndivs}" if ndivs > 100
end

# All divisors
# 16 - [1,16,2,8,4]

# puts index
# puts ndivs

